{"version":3,"sources":["components/card/Card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/SearchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","avatar_url","login","CardList","monsters","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","getProfiles","loadmore","setState","apiLoader","since","state","fetch","then","response","json","results","concat","catch","error","console","log","searchProfile","searchFieldValue","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","onClick","loadMore","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uTAGaA,G,kBAAO,SAAAC,GACZ,OAAO,yBAAKC,UAAU,kBACN,yBAAKC,IAAI,WAAWC,IAAG,UAAKH,EAAMI,QAAQC,cAC1C,4BAAKL,EAAMI,QAAQE,UCD9BC,EAAW,SAAAP,GACpB,OAAO,yBAAKC,UAAU,aACRD,EAAMQ,SAASC,KAAI,SAAAL,GAClB,OAAO,kBAAC,EAAD,CAAMA,QAASA,EAASM,IAAKN,EAAQO,UCLlDC,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAAO,yBAAKb,UAAU,cACV,2BAAOc,KAAK,SACLF,YAAaA,EACbG,SAAUF,OC0DlBG,E,kDAzDb,aAAc,IAAD,8BACX,gBAaFC,YAAc,WAAmB,IAAlBC,EAAiB,uDAAN,EACxB,EAAKC,SAAS,CAACC,WAAW,EAAMC,MAAO,EAAKC,MAAMD,MAAQH,IAC1DK,MAAM,sCAAD,OAAuC,EAAKD,MAAMD,MAAQH,IAC9DM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKR,SAAS,CAACZ,SAAU,EAAKe,MAAMf,SAASqB,OAAOD,GAAUP,WAAW,OACxES,OAAM,SAAAC,GACPC,QAAQC,IAAIF,GACZ,EAAKX,SAAS,CAACC,WAAW,QAtBjB,EA8Bba,cAAgB,aA5Bd,EAAKX,MAAQ,CACXf,SAAU,GACV2B,iBAAkB,GAClBd,WAAW,EACXC,MAAO,IANE,E,gEAWXc,KAAKlB,gB,iCAgBLkB,KAAKlB,YAAY,M,+BAKR,IAAD,SAC+BkB,KAAKb,MAApCf,EADA,EACAA,SAAU2B,EADV,EACUA,iBACZE,EAAmB7B,EAAS8B,QAAO,SAAAlC,GAAO,OAAIA,EAAQE,MAAMiC,cAAcC,SAASL,EAAiBI,kBAE1G,OACM,yBAAKtC,UAAU,OACb,wBAAIA,UAAU,WAAd,oBACEmC,KAAKb,MAAMF,UACX,iDAEF,6BACE,kBAAC,EAAD,CAAWR,YAAY,iBAAiBC,aAAc,SAAA2B,GAAC,OAAI,EAAKrB,SAAS,CAAEe,iBAAkBM,EAAEC,OAAOC,WACtG,kBAAC,EAAD,CAAUnC,SAAU6B,IACpB,6BACE,4BAAQO,QAAS,kBAAM,EAAKC,aAA5B,oB,GAhDEC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM+B,c","file":"static/js/main.3a14c17e.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.styles.scss';\n\nexport const Card = props => {\n        return <div className='card-container'>\n                        <img alt='monsters' src={`${props.monster.avatar_url}`} />\n                        <h1>{props.monster.login}</h1>\n                        {/* <span>{props.monster.url}</span> */}\n                </div>\n};","import React from 'react';\nimport './card-list.styles.scss';\nimport { Card } from '../card/Card.component';\n\n\nexport const CardList = props => {\n    return <div className='card-list'>\n                { props.monsters.map(monster => {\n                   return <Card monster={monster} key={monster.id} />\n                  })\n                }\n            </div>\n}","import React from 'react';\nimport './Searchbox.styles.scss';\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n    return <div className='search-box'>\n                <input type='search' \n                       placeholder={placeholder}\n                       onChange={handleChange} />\n            </div>\n} ","import React, { Component } from 'react';\nimport './App.scss';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/SearchBox.component';\nimport {monsters } from './utils/json/monsters';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchFieldValue: '',\n      apiLoader: false,\n      since: 30,\n    }\n  }\n\n  componentDidMount() {\n    this.getProfiles();\n  }\n\n  getProfiles = (loadmore = 0) => {\n    this.setState({apiLoader: true, since: this.state.since + loadmore});\n    fetch(`https://api.github.com/users?since=${this.state.since + loadmore}`)\n    .then(response => response.json())\n    .then(results => {\n      this.setState({monsters: this.state.monsters.concat(results), apiLoader: false }) \n    }).catch(error => {\n      console.log(error);\n      this.setState({apiLoader: false });\n    });\n  }\n\n  loadMore(){\n    this.getProfiles(20);\n  }\n\n  searchProfile = () => {}\n\n  render () {\n    const { monsters, searchFieldValue } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.login.toLowerCase().includes(searchFieldValue.toLowerCase())\n    );\n    return (\n          <div className=\"App\">\n            <h1 className='heading'>Monsters RoloDex</h1>\n            { this.state.apiLoader ? \n              <div>Loading profiles</div>\n            :\n            <div> \n              <SearchBox placeholder='Search Monster' handleChange={e => this.setState({ searchFieldValue: e.target.value })} />\n              <CardList monsters={filteredMonsters} />\n              <div>\n                <button onClick={() => this.loadMore()}> \n                   Load More\n                </button>\n                </div>\n            </div>\n            }   \n          </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}